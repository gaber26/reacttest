{"ast":null,"code":"var _jsxFileName = \"/Users/gaber/Documents/\\u7EC3\\u4E60/react-demo/src/pages/practice/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport './index.scss';\nimport PracticeItem from './practiceItem';\nimport { Button } from 'antd';\nimport { articleList } from '../../lib/api';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Xiaojiejie extends Component {\n  // 类名  继承  react组件\n  constructor(props) {\n    // 构造\n    super(props); // 调用父级方法\n\n    this.state = {\n      inputValue: '',\n      list: ['测试', '测试1'],\n      articleListInfo: []\n    };\n  } // componentWillMount () {\n  //   console.log('componentWillMount-----组件将要挂载到页面的时候')\n  // }\n  // shouldComponentUpdate (nextProps, nextState) {\n  //   console.log('shouldComponentUpdate-----组件更新之前  1')\n  //   return true\n  // }\n  // componentWillUpdate () {\n  //   console.log('componentWillUpdate-----组件更新之前  2')\n  // }\n\n\n  render() {\n    // 渲染\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input\",\n          children: \"\\u540D\\u5B57\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"input\",\n          value: this.state.inputValue,\n          onChange: e => {\n            this.inputChange(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          value: \"small\",\n          type: \"primary\",\n          onClick: () => {\n            this.addClick();\n          },\n          children: \"\\u589E\\u52A0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        ref: ul => {\n          this.ulDom = ul;\n        },\n        children: /*#__PURE__*/_jsxDEV(TransitionGroup, {\n          children: this.state.list.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(CSSTransition, {\n              timeout: 2000,\n              classNames: \"boos-text\",\n              unmountOnExit: true,\n              appear: true,\n              children: /*#__PURE__*/_jsxDEV(PracticeItem, {\n                content: item,\n                index: index,\n                delItem: () => {\n                  this.delItem(index);\n                }\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 25\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  } // componentDidUpdate () {\n  //   console.log('componentDidUpdate-----所有挂载完毕执行   4')\n  // }\n\n\n  componentDidMount() {\n    console.log('componentDidMount-----组件已经挂载到页面的时候');\n  }\n\n  inputChange(e) {\n    this.setState({\n      // react单向流，需要绑定原始数据变化\n      inputValue: e.target.value\n    });\n  }\n\n  addClick() {\n    this.setState({\n      // react单向流，需要绑定原始数据变化\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: ''\n    }, () => {\n      console.log(this.ulDom.querySelectorAll('li').length);\n    });\n  }\n\n  delItem(index) {\n    // 数据操作必须重新赋值操作，不能直接改变state里面的数据\n    let list = this.state.list;\n    list.splice(index, 1);\n    this.setState({\n      // react单向流，需要绑定原始数据变化\n      list: list\n    });\n  }\n\n}\n\nexport default Xiaojiejie;","map":{"version":3,"sources":["/Users/gaber/Documents/练习/react-demo/src/pages/practice/index.js"],"names":["React","Component","Fragment","PracticeItem","Button","articleList","CSSTransition","TransitionGroup","Xiaojiejie","constructor","props","state","inputValue","list","articleListInfo","render","e","inputChange","addClick","ul","ulDom","map","item","index","delItem","componentDidMount","console","log","setState","target","value","querySelectorAll","length","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,cAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAG;AACpCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAG;AACpB,UAAMA,KAAN,EADiB,CACH;;AACd,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,KAAP,CAFK;AAGXC,MAAAA,eAAe,EAAC;AAHL,KAAb;AAKD,GARgC,CAUjC;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AAAG;AACV,wBACI,QAAC,QAAD;AAAA,8BAGE;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,EAAE,EAAC,OAAV;AAAkB,UAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWC,UAApC;AAAgD,UAAA,QAAQ,EAAGI,CAAD,IAAO;AAAC,iBAAKC,WAAL,CAAiBD,CAAjB;AAAoB;AAAtF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAsB,UAAA,IAAI,EAAC,SAA3B;AAAqC,UAAA,OAAO,EAAE,MAAM;AAAC,iBAAKE,QAAL;AAAgB,WAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE;AAAI,QAAA,GAAG,EAAGC,EAAD,IAAQ;AAAC,eAAKC,KAAL,GAAaD,EAAb;AAAgB,SAAlC;AAAA,+BACE,QAAC,eAAD;AAAA,oBAEM,KAAKR,KAAL,CAAWE,IAAX,CAAgBQ,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,gCACE,QAAC,aAAD;AACE,cAAA,OAAO,EAAE,IADX;AAEE,cAAA,UAAU,EAAC,WAFb;AAGE,cAAA,aAAa,MAHf;AAIE,cAAA,MAAM,EAAE,IAJV;AAAA,qCAOE,QAAC,YAAD;AAA0B,gBAAA,OAAO,EAAED,IAAnC;AAAyC,gBAAA,KAAK,EAAEC,KAAhD;AAAuD,gBAAA,OAAO,EAAE,MAAI;AAAC,uBAAKC,OAAL,CAAaD,KAAb;AAAoB;AAAzF,iBAAmBA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAPF,eAKOA,KALP;AAAA;AAAA;AAAA;AAAA,oBADF;AAWD,WAZD;AAFN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA8BD,GAtDgC,CAwDjC;AACA;AACA;;;AAEAE,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD;;AAEDV,EAAAA,WAAW,CAAED,CAAF,EAAK;AACd,SAAKY,QAAL,CAAc;AAAE;AACdhB,MAAAA,UAAU,EAAEI,CAAC,CAACa,MAAF,CAASC;AADT,KAAd;AAGD;;AACDZ,EAAAA,QAAQ,GAAI;AACV,SAAKU,QAAL,CAAc;AAAE;AACdf,MAAAA,IAAI,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,EAAqB,KAAKF,KAAL,CAAWC,UAAhC,CADM;AAEZA,MAAAA,UAAU,EAAE;AAFA,KAAd,EAGG,MAAM;AACPc,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWW,gBAAX,CAA4B,IAA5B,EAAkCC,MAA9C;AACD,KALD;AAMD;;AACDR,EAAAA,OAAO,CAAED,KAAF,EAAS;AAAE;AAChB,QAAIV,IAAI,GAAG,KAAKF,KAAL,CAAWE,IAAtB;AACAA,IAAAA,IAAI,CAACoB,MAAL,CAAYV,KAAZ,EAAmB,CAAnB;AACA,SAAKK,QAAL,CAAc;AAAE;AACdf,MAAAA,IAAI,EAAEA;AADM,KAAd;AAGD;;AAnFgC;;AAsFnC,eAAeL,UAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport './index.scss';\nimport PracticeItem from './practiceItem'\nimport { Button } from 'antd'\nimport { articleList } from '../../lib/api'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nclass Xiaojiejie extends Component {  // 类名  继承  react组件\n  constructor(props) {  // 构造\n    super(props)  // 调用父级方法\n    this.state = {\n      inputValue: '',\n      list: ['测试', '测试1'],\n      articleListInfo:[]\n    }\n  }\n\n  // componentWillMount () {\n  //   console.log('componentWillMount-----组件将要挂载到页面的时候')\n  // }\n\n  // shouldComponentUpdate (nextProps, nextState) {\n  //   console.log('shouldComponentUpdate-----组件更新之前  1')\n  //   return true\n  // }\n\n  // componentWillUpdate () {\n  //   console.log('componentWillUpdate-----组件更新之前  2')\n  // }\n\n  render() {  // 渲染\n    return (\n        <Fragment> \n          {/* 外层类似vue必须加一层盒子，但是加了这个就可以不用增加额外盒子 */}\n          {/* 绑定事件必须要.bind(this)进去，或者使用箭头函数，不然无法找到this */}\n          <div>\n            <label htmlFor=\"input\" >名字</label>\n            <input id=\"input\" value={this.state.inputValue} onChange={(e) => {this.inputChange(e)}} />\n            <Button value=\"small\" type=\"primary\" onClick={() => {this.addClick()}}>增加</Button>\n          </div>\n          <ul ref={(ul) => {this.ulDom = ul}}>\n            <TransitionGroup>\n              {\n                  this.state.list.map((item, index) => {\n                    return (\n                      <CSSTransition\n                        timeout={2000}\n                        classNames=\"boos-text\"\n                        unmountOnExit\n                        appear={true}\n                        key={index}\n                      >\n                        <PracticeItem key={index} content={item} index={index} delItem={()=>{this.delItem(index)}} />\n                      </CSSTransition>\n                    )\n                  })\n                }\n            </TransitionGroup>\n          </ul>\n        </Fragment>\n    )\n  }\n\n  // componentDidUpdate () {\n  //   console.log('componentDidUpdate-----所有挂载完毕执行   4')\n  // }\n\n  componentDidMount () {\n    console.log('componentDidMount-----组件已经挂载到页面的时候')\n  }\n\n  inputChange (e) {\n    this.setState({ // react单向流，需要绑定原始数据变化\n      inputValue: e.target.value\n    })\n  }\n  addClick () {\n    this.setState({ // react单向流，需要绑定原始数据变化\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: ''\n    }, () => {\n      console.log(this.ulDom.querySelectorAll('li').length)\n    })\n  }\n  delItem (index) { // 数据操作必须重新赋值操作，不能直接改变state里面的数据\n    let list = this.state.list\n    list.splice(index, 1)\n    this.setState({ // react单向流，需要绑定原始数据变化\n      list: list\n    })\n  }\n}\n\nexport default Xiaojiejie;"]},"metadata":{},"sourceType":"module"}