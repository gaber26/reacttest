{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nexport default ((url = '', data = {}, type = 'GET', contentType, timeout, resType) => {\n  return new Promise((resolve, reject) => {\n    let requestConfig = {\n      method: type,\n      url: url,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': contentType ? contentType : 'application/json'\n      },\n      timeout: timeout ? timeout : 180000,\n      responseType: resType ? resType : 'json'\n    };\n\n    switch (type.toUpperCase()) {\n      case \"GET\":\n        requestConfig.params = data;\n\n        requestConfig.paramsSerializer = params => {\n          return qs.stringify(params, {\n            indices: false\n          });\n        };\n\n        break;\n\n      case \"DELETE\":\n        requestConfig.params = data;\n        break;\n\n      case \"POST\":\n        requestConfig.data = data;\n        break;\n\n      case \"PUT\":\n        requestConfig.data = data;\n        break;\n\n      default:\n        requestConfig.data = data;\n    }\n\n    if ((type === 'POST' || type === 'PUT') && contentType !== 'multipart/form-data') {\n      requestConfig.data = contentType ? qs.stringify(data) : JSON.stringify(data);\n    }\n\n    axios(requestConfig).then(resp => {\n      if (resp) {\n        resolve(resp);\n      } else {\n        return;\n      }\n    }).catch(err => {\n      reject(err);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/gaber/Documents/练习/project2/reacttest/src/lib/http.js"],"names":["axios","qs","url","data","type","contentType","timeout","resType","Promise","resolve","reject","requestConfig","method","headers","responseType","toUpperCase","params","paramsSerializer","stringify","indices","JSON","then","resp","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AAGA,gBAAe,CAACC,GAAG,GAAG,EAAP,EAAWC,IAAI,GAAG,EAAlB,EAAsBC,IAAI,GAAG,KAA7B,EAAoCC,WAApC,EAAiDC,OAAjD,EAA0DC,OAA1D,KAAsE;AACnF,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,aAAa,GAAG;AAClBC,MAAAA,MAAM,EAAER,IADU;AAElBF,MAAAA,GAAG,EAAEA,GAFa;AAGlBW,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgBR,WAAW,GAAGA,WAAH,GAAiB;AAFrC,OAHS;AAOlBC,MAAAA,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa,MAPX;AAQlBQ,MAAAA,YAAY,EAAEP,OAAO,GAAGA,OAAH,GAAa;AARhB,KAApB;;AAWA,YAAQH,IAAI,CAACW,WAAL,EAAR;AACE,WAAK,KAAL;AACEJ,QAAAA,aAAa,CAACK,MAAd,GAAuBb,IAAvB;;AACAQ,QAAAA,aAAa,CAACM,gBAAd,GAAiCD,MAAM,IAAI;AACzC,iBAAOf,EAAE,CAACiB,SAAH,CAAaF,MAAb,EAAqB;AAC1BG,YAAAA,OAAO,EAAE;AADiB,WAArB,CAAP;AAGD,SAJD;;AAKA;;AACF,WAAK,QAAL;AACER,QAAAA,aAAa,CAACK,MAAd,GAAuBb,IAAvB;AACA;;AACF,WAAK,MAAL;AACEQ,QAAAA,aAAa,CAACR,IAAd,GAAqBA,IAArB;AACA;;AACF,WAAK,KAAL;AACEQ,QAAAA,aAAa,CAACR,IAAd,GAAqBA,IAArB;AACA;;AACF;AACEQ,QAAAA,aAAa,CAACR,IAAd,GAAqBA,IAArB;AAnBJ;;AAsBA,QAAI,CAACC,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,KAA7B,KAAuCC,WAAW,KAAK,qBAA3D,EAAkF;AAChFM,MAAAA,aAAa,CAACR,IAAd,GAAqBE,WAAW,GAAGJ,EAAE,CAACiB,SAAH,CAAaf,IAAb,CAAH,GAAwBiB,IAAI,CAACF,SAAL,CAAef,IAAf,CAAxD;AACD;;AAEDH,IAAAA,KAAK,CAACW,aAAD,CAAL,CAAqBU,IAArB,CAA2BC,IAAD,IAAU;AAClC,UAAIA,IAAJ,EAAU;AACRb,QAAAA,OAAO,CAACa,IAAD,CAAP;AACD,OAFD,MAEO;AACL;AACD;AACF,KAND,EAMGC,KANH,CAMUC,GAAD,IAAS;AAChBd,MAAAA,MAAM,CAACc,GAAD,CAAN;AACD,KARD;AASD,GA/CM,CAAP;AAgDD,CAjDD","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\n\nexport default (url = '', data = {}, type = 'GET', contentType, timeout, resType) => {\n  return new Promise((resolve, reject) => {\n    let requestConfig = {\n      method: type,\n      url: url,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': contentType ? contentType : 'application/json'\n      },\n      timeout: timeout ? timeout : 180000,\n      responseType: resType ? resType : 'json',\n    };\n\n    switch (type.toUpperCase()) {\n      case \"GET\":\n        requestConfig.params = data;\n        requestConfig.paramsSerializer = params => {\n          return qs.stringify(params, {\n            indices: false\n          })\n        };\n        break;\n      case \"DELETE\":\n        requestConfig.params = data;\n        break;\n      case \"POST\":\n        requestConfig.data = data;\n        break;\n      case \"PUT\":\n        requestConfig.data = data;\n        break;\n      default:\n        requestConfig.data = data;\n    }\n\n    if ((type === 'POST' || type === 'PUT') && contentType !== 'multipart/form-data') {\n      requestConfig.data = contentType ? qs.stringify(data) : JSON.stringify(data);\n    }\n\n    axios(requestConfig).then((resp) => {\n      if (resp) {\n        resolve(resp);\n      } else {\n        return\n      }\n    }).catch((err) => {\n      reject(err);\n    })\n  });\n}"]},"metadata":{},"sourceType":"module"}